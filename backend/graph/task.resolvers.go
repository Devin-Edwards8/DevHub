package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	db "github.com/Devin-Edwards8/DevHub/database"
	"github.com/Devin-Edwards8/DevHub/graph/model"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, id string) (*model.Task, error) {
	fmt.Println("Creating a Task...")
	defaultStatus := model.StatusNotStarted
	newTask := &model.Task{
		ID:     id,
		Status: &defaultStatus,
	}

	if err := db.DB.Create(newTask).Error; err != nil {
		return nil, err
	}

	return newTask, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	var tasks []*model.Task
	if err := db.DB.Find(&tasks).Error; err != nil {
		return nil, err
	}
	return tasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
